contract UserLedger {
    struct Employee {
        bytes32 firstname;
        bytes32 lastname;
        bytes32 role;
        bytes32 title;
        bytes32 biometricHash;
    }
    mapping(uint => Employee) listEmp;
    address superAdmin;
    mapping(address => bool) isAdmin;
    uint employeeCounter;
    
    function UserLedger(){
        isAdmin[msg.sender] = true;
        superAdmin = msg.sender;
    }

    function() {
        revert();
    }
    
    event NewEmployee(uint indexed empID, bytes32 indexed firstname, bytes32 indexed lastname, bytes32 role, bytes32 title);
    
    function addAdmin(address _newAdmin){
        assert(msg.sender == superAdmin);
        isAdmin[_newAdmin] = true;
    }
    
    function removeAdmin(address _newAdmin){
        assert(msg.sender == superAdmin);
        isAdmin[_newAdmin] = false;
    }
    
    function addEmployee(bytes32 _firstname, bytes32 _lastname, bytes32 _role, bytes32 _title, bytes32 _biometrichash) returns (bool success){
        assert(isAdmin[msg.sender]);
        uint empID = employeeCounter++;
        listEmp[empID].firstname = _firstname;
        listEmp[empID].lastname = _lastname;
        listEmp[empID].role = _role;
        listEmp[empID].title = _title;
        listEmp[empID].biometricHash = _biometrichash;
        NewEmployee(employeeCounter, _firstname, _lastname, _role, _title);
        return true;
    }
